/*
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 */

/*          SOLUTION

class Solution {
public:

int largest_rectangle(vector<int>height){   // yeh wala function ka code same as maximum rectangle in histogram ka optimised wala hai
int n=height.size();
stack<int>st;
int ans=0;
int index;

for(int i=0;i<n;i++){
    while(!st.empty()&&height[st.top()]>height[i]){
       index=st.top();
       st.pop();
       if(!st.empty()){
       ans=max(ans,height[index]*(i-st.top()-1));
      }
      else{
        ans=max(ans,height[index]*(i));
      }
    }
    st.push(i);
}

while(!st.empty()){
    index=st.top();
    st.pop();
    if(!st.empty()){
        //n se multiply karenge kyonki ab jo elements bachenge unke liye nsr n hoga kyonki full array traverse ho chuki hai
        ans=max(ans,height[index]*(n-st.top()-1));
    }
    else{
        ans=max(ans,height[index]*n);
    }
}

return ans;
}

    int maximalRectangle(vector<vector<char>>& matrix) {
        int row=matrix.size();
        int col=matrix[0].size();
        vector<int>height(col,0);
        int ans=0;
  for(int i=0;i<row;i++){
     for(int j=0;j<col;j++){
         if(matrix[i][j]=='0'){
           height[j]=0;
         }
         else{
             height[j]+=1;
         }
     }
ans=max(ans,largest_rectangle(height));
  }
      
return ans;
    }
};

*/
