/*  leetcode 84 hard question

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.


*/



/*                solution method1  leetcode 84 time & space complexity both are O(n)

class Solution {
public:

// method 1:     next smallest left, next smallest right nikalne ke baad (nsr-nsl-1)* height   ka maximum is the final answer
    int largestRectangleArea(vector<int>& heights) {

     int n=heights.size();   
    vector<int>nsl(n);
    vector<int>nsr(n);
    stack<int>st;

// first calculating for nsr
for(int i=0;i<n;i++){
    while(!st.empty() && heights[st.top()]> heights[i]){
        nsr[st.top()]=i;
        st.pop();
    }
    st.push(i);
}
while(!st.empty()){
     nsr[st.top()]=n;
    st.pop();
}

// calculating for nsl
for(int i=n-1;i>=0;i--){
    while(!st.empty() && heights[st.top()]>heights[i]){
        nsl[st.top()]=i;
        st.pop();
    }
    st.push(i);
}
while(!st.empty()){
     nsl[st.top()]=-1;
    st.pop();
}

// calculation for getting max rectangle
int ans=0;
for(int i=0;i<n;i++){
    int temp=heights[i]*(nsr[i]-nsl[i]-1);
    ans=max(ans,temp);
}

return ans;

    }
};

*/


/*            optimised   solution method2
in this code we will solve this problem only in single pass matlab ki ham keval nsr nikalenge aur jo nsl hoga woh stack ka top element hoga uske liye kyonki stack ke andar elements ham increasing order me fill kar rahe aur ham saath sath me max ke liye compare bhi karte rahenge

stack<int>st;
int ans=0;
int index;

for(int i=0;i<n;i++){
    while(!st.empty()&&height[st.top()]>height[i]){
       index=st.top();
       st.pop();
       if(!st.empty()){
       ans=max(ans,height[index]*(i-st.top()-1));
      }
      else{
        ans=max(ans,height[index]*(i));
      }
    }
    st.push(i);
}

while(!st.empty()){
    index=st.top();
    st.pop();
    if(!st.empty()){
        //n se multiply karenge kyonki ab jo elements bachenge unke liye nsr n hoga kyonki full array traverse ho chuki hai
        ans=max(ans,height[index]*(n-st.top()-1));
    }
    else{
        ans=max(ans,height[index]*n);
    }
}

return ans;

*/
