#include<iostream>
#include<stack>
using namespace std;

int solve(stack<int>&st, int position){
//base case
if(position==1){
  return st.top();
}

position--;
int temp=st.top();
st.pop();

int ans=solve(st,position); // recursive call

// backtrack to stack
st.push(temp);
return ans;

}


int getmiddleelement(stack<int>&st){

  //if stack is empty
  if(st.empty()){
    return -1;
  }
  
// checking for if the size is even or odd
int size=st.size();
int position=0;
if(size&1){
  // means odd
   position=(size/2)+1;
}else{
  // means even
  position=(size/2);
}

 return solve(st,position);

}

int main(){

stack<int>st;

/*
st.push(10);
st.push(20);
st.push(30);  <------------- middle as this is case of odd
st.push(40);
st.push(50); 
*/

/*
st.push(10);
st.push(20);
st.push(30);
st.push(40);
st.push(50);   <-------------- middle as this is case for even
st.push(60);
st.push(70);
st.push(80);
*/

int ans= getmiddleelement(st);
cout<<"MIDDLE ELEMENT: "<<ans<<endl;


  return 0;
}
