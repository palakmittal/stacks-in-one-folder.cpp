/*                       question
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
 

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

Example 2:

Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both
know each other. None of them is a celebrity.

Your Task:
You don't need to read input or print anything. Complete the function celebrity() which takes the matrix M and its size N as input parameters and returns the index of the celebrity. If no such celebrity is present, return -1.


Expected Time Complexity: O(N^2)
Expected Auxiliary Space: O(1)


Constraints:
2 <= N <= 3000
0 <= M[][] <= 1

  */

/*              solution by brute force

//approach1: O(n^2)  jab  a[i][j] =0 ho us row me matlab ki sare elements=0 hone  chahiye  us row ke

int count=0;
for(int i=0;i<row;i++){
  count=0;
  for(int j=0;j<col;j++){
    if(a[i][j]==0){
      count+=1;
    }
  }
  if(count==i+1){
    cout<<"the index "<<i<<"is celebrity"<<endl;
    break;
  }
}

*/


/*               solution by stacks in O(n)            

//Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        
        stack<int>st;
        // pushing indexes to stack from n-1 to 0
        for(int i=n-1;i>=0;i--){
            st.push(i);
        }
        
        while(st.size()>1){
            
            int first=st.top();
            st.pop();
            int second=st.top();
            st.pop();
            
            if(M[first][second]==0 && M[second][first]==1){
                st.push(first);
            }
            else if(M[first][second]==1 && M[second][first]==0){
                st.push(second);
            }
            
        }
        
        // confirm
        if(st.empty()){
            return -1;
        }
    
       int row_sum=0, col_sum=0;
       int num=st.top();
       for(int i=0;i<n;i++){
           row_sum+=M[num][i];
           col_sum+=M[i][num];
       }
       if(row_sum==0 && col_sum==n-1){
           return num;
       }
      else  return -1;
    }



*/
